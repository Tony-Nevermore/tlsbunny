version '1.0-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'application'

sourceCompatibility = 1.9

repositories {
    mavenCentral()
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.+'
}

// tasks for running tests for GnuTLS

task buildGnutlsDocker(type: Exec) {
    commandLine 'docker',
            'build',
            '--file', 'src/main/docker/gnutls/Dockerfile',
            '--tag', 'gnutls/server/tls13',
            '.'
}

task runGnutlsDockerDaemon {
    doLast {
        exec {
            ignoreExitValue = true
            commandLine 'docker', 'container', 'kill', 'gnutls_server_tls13'
        }
        exec {
            ignoreExitValue = true
            commandLine 'docker', 'rm', 'gnutls_server_tls13'
        }
        exec {
            commandLine 'docker',
                    'run',
                    '--name', 'gnutls_server_tls13',
                    '-d',
                    '-p', '50101:50101',
                    'gnutls/server/tls13'
        }

        // a little delay to let the server start
        exec {
            commandLine 'sleep', '3'
        }
    }
}

task killGnutlsDockerContainer(type: Exec) {
    ignoreExitValue = true
    commandLine 'docker', 'container', 'kill', 'gnutls_server_tls13'
}

task removeGnutlsDockerContainer(type: Exec) {
    ignoreExitValue = true
    commandLine 'docker', 'rm', 'gnutls_server_tls13'
}

task gnutlsClient(type: JavaExec) {
    classpath sourceSets.main.runtimeClasspath
    applicationDefaultJvmArgs = ["-Dtlsbunny.port=20101"]
    main = "com.gypsyengineer.tlsbunny.tls13.test.gnutls.client.HttpsClient"
}

task gnutlsFuzzyClient(type: JavaExec) {
    classpath sourceSets.main.runtimeClasspath
    systemProperty 'tlsbunny.port', '50101'
    systemProperty 'tlsbunny.threads', '1'
    main = "com.gypsyengineer.tlsbunny.tls13.test.gnutls.client.FuzzyClient"
}

// run a local server in a docker container and start fuzzing
task runGnutlsFuzzyClient {
    dependsOn 'runGnutlsDockerDaemon'
    dependsOn 'gnutlsFuzzyClient'

    // run fuzzing
    tasks.findByName('gnutlsFuzzyClient').mustRunAfter('runGnutlsDockerDaemon')
}

// tasks for running tests for OpenSSL

task buildOpensslDocker(type: Exec) {
    commandLine 'docker',
            'build',
            '--file', 'src/main/docker/openssl/Dockerfile',
            '--tag', 'openssl/server/tls13',
            '.'
}

task runOpensslDockerDaemon {
    doLast {
        exec {
            ignoreExitValue = true
            commandLine 'docker', 'container', 'kill', 'openssl_server_tls13'
        }
        exec {
            ignoreExitValue = true
            commandLine 'docker', 'rm', 'openssl_server_tls13'
        }
        exec {
            commandLine 'docker',
                    'run',
                    '--name', 'openssl_server_tls13',
                    '-d',
                    '-p', '10101:10101',
                    'openssl/server/tls13'
        }

        // a little delay to let the server start
        exec {
            commandLine 'sleep', '3'
        }
    }
}

task killOpensslDockerContainer(type: Exec) {
    ignoreExitValue = true
    commandLine 'docker', 'container', 'kill', 'openssl_server_tls13'
}

task removeOpensslDockerContainer(type: Exec) {
    ignoreExitValue = true
    commandLine 'docker', 'rm', 'openssl_server_tls13'
}

task opensslHttpsClient(type: JavaExec) {
    classpath sourceSets.main.runtimeClasspath
    main = "com.gypsyengineer.tlsbunny.tls13.test.openssl.client.HttpsClient"
}

task opensslFuzzyClient(type: JavaExec) {
    classpath sourceSets.main.runtimeClasspath
    systemProperty 'tlsbunny.port', '10101'
    systemProperty 'tlsbunny.threads', '1'
    main = "com.gypsyengineer.tlsbunny.tls13.test.openssl.client.FuzzyClient"
}

task opensslClientAuth(type: JavaExec) {
    classpath sourceSets.main.runtimeClasspath
    main = "com.gypsyengineer.tlsbunny.tls13.test.openssl.client.ClientAuth"
}

task opensslFuzzyClientAuth(type: JavaExec) {
    classpath sourceSets.main.runtimeClasspath
    main = "com.gypsyengineer.tlsbunny.tls13.test.openssl.client.FuzzyClientAuth"
}

// run a local server in a docker container and start fuzzing
task runOpensslFuzzyClient {
    dependsOn 'runOpensslDockerDaemon'
    dependsOn 'opensslFuzzyClient'

    // run fuzzing
    tasks.findByName('opensslFuzzyClient').mustRunAfter('runOpensslDockerDaemon')
}

// tasks for running tests for picotls

task buildPicotlsDocker(type: Exec) {
    commandLine 'docker',
            'build',
            '--file', 'src/main/docker/picotls/Dockerfile',
            '--tag', 'picotls/server/tls13',
            '.'
}

task runPicotlsDockerDaemon {
    doLast {
        exec {
            ignoreExitValue = true
            commandLine 'docker', 'container', 'kill', 'picotls_server_tls13'
        }
        exec {
            ignoreExitValue = true
            commandLine 'docker', 'rm', 'picotls_server_tls13'
        }
        exec {
            commandLine 'docker',
                    'run',
                    '--name', 'picotls_server_tls13',
                    '-d',
                    '-p', '20101:20101',
                    'picotls/server/tls13'
        }

        // a little delay to let the server start
        exec {
            commandLine 'sleep', '3'
        }
    }
}

task killPicotlsDockerContainer(type: Exec) {
    ignoreExitValue = true
    commandLine 'docker', 'container', 'kill', 'picotls_server_tls13'
}

task removePicotlsDockerContainer(type: Exec) {
    ignoreExitValue = true
    commandLine 'docker', 'rm', 'picotls_server_tls13'
}

task picotlsClient(type: JavaExec) {
    classpath sourceSets.main.runtimeClasspath
    applicationDefaultJvmArgs = ["-Dtlsbunny.port=20101"]
    main = "com.gypsyengineer.tlsbunny.tls13.test.picotls.client.PicotlsClient"
}

task picotlsFuzzyClient(type: JavaExec) {
    classpath sourceSets.main.runtimeClasspath
    systemProperty 'tlsbunny.port', '20101'
    systemProperty 'tlsbunny.threads', '1'
    main = "com.gypsyengineer.tlsbunny.tls13.test.picotls.client.FuzzyClient"
}

// run a local server in a docker container and start fuzzing
task runPicotlsFuzzyClient {
    dependsOn 'runPicotlsDockerDaemon'
    dependsOn 'picotlsFuzzyClient'

    // run fuzzing
    tasks.findByName('picotlsFuzzyClient').mustRunAfter('runPicotlsDockerDaemon')
}

// tasks for running tests for h2o + picotls

task buildH2ODocker(type: Exec) {
    commandLine 'docker',
            'build',
            '--file', 'src/main/docker/h2o/Dockerfile',
            '--tag',  'h2o/server/tls13',
            '.'
}

task runH2ODockerDaemon {
    doLast {
        exec {
            ignoreExitValue = true
            commandLine 'docker', 'container', 'kill', 'h2o_server_tls13'
        }
        exec {
            ignoreExitValue = true
            commandLine 'docker', 'rm', 'h2o_server_tls13'
        }
        exec {
            commandLine 'docker',
                    'run',
                    '--name', 'h2o_server_tls13',
                    '-d',
                    '-p', '30101:30101',
                    'h2o/server/tls13'
        }

        // a little delay to let the server start
        exec {
            commandLine 'sleep', '3'
        }
    }
}

task killH2ODockerContainer(type: Exec) {
    ignoreExitValue = true
    commandLine 'docker', 'container', 'kill', 'h2o_server_tls13'
}

task removeH2ODockerContainer(type: Exec) {
    ignoreExitValue = true
    commandLine 'docker', 'rm', 'h2o_server_tls13'
}

task h2oClient(type: JavaExec) {
    classpath sourceSets.main.runtimeClasspath
    applicationDefaultJvmArgs = ["-Dtlsbunny.port=30101"]
    main = "com.gypsyengineer.tlsbunny.tls13.test.h2o.client.HttpsClient"
}

task h2oFuzzyClient(type: JavaExec) {
    classpath sourceSets.main.runtimeClasspath
    systemProperty 'tlsbunny.port', '30101'
    systemProperty 'tlsbunny.threads', '3'
    main = "com.gypsyengineer.tlsbunny.tls13.test.h2o.client.FuzzyClient"
}

// run a local server in a docker container and start fuzzing
task runH2OFuzzyClient {
    dependsOn 'runH2ODockerDaemon'
    dependsOn 'h2oFuzzyClient'

    // run fuzzing
    tasks.findByName('h2oFuzzyClient').mustRunAfter('runH2ODockerDaemon')
}

// run fuzzing for all targets

task buildAllDocker() {
    dependsOn 'buildGnutlsDocker'
    dependsOn 'buildPicotlsDocker'
    dependsOn 'buildOpensslDocker'
    dependsOn 'buildH2ODocker'
}

task runFuzzyClients() {
    dependsOn 'runH2OFuzzyClient'
    dependsOn 'runPicotlsFuzzyClient'
    dependsOn 'runOpensslFuzzyClient'
    dependsOn 'runGnutlsFuzzyClient'
}